
CODES

// --------------------------------------------Top module
module uart_top (
    input wire clk,
    input wire reset,
    input wire tx_start,
    input wire [7:0] tx_data,
    output wire [7:0] rx_data,
    output wire rx_done,
    output wire tx_done
);
    wire baud_tick;
    wire tx;

    // Instantiate the Baud Clock Generator
    baudrate baud_gen (
        .clk(clk),
        .reset(reset),
        .baud_tick(baud_tick)
    );

    // Instantiate the UART Transmitter
    uart_tx tx_inst (
        .clk(clk),
        .reset(reset),
        .tx_start(tx_start),
        .tx_data(tx_data),
        .baud_tick(baud_tick),    
      .tx(tx),
        .tx_done(tx_done)
    );

    // Instantiate the UART Receiver
    uart_rx rx_inst (
        .clk(clk),
        .reset(reset),
        .rx(tx),  
        .baud_tick(baud_tick),
        .rx_data(rx_data),
        .rx_done(rx_done)
    );

endmodule

//--------------------------------------------------Baud clock generator
module baudrate(
    input wire clk,
    input wire reset,
    output reg baud_tick
);
    parameter BAUD_RATE = 9600;
    parameter CLOCK_FREQ = 50000000;
    parameter BIT_PERIOD = CLOCK_FREQ / BAUD_RATE;
    reg [15:0] counter;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            counter <= 0;
            baud_tick <= 0;
        end else if (counter < BIT_PERIOD - 1) begin
            counter <= counter + 1;
            baud_tick <= 0;
        end else begin
            counter <= 0;
            baud_tick <= 1;
        end
    end
endmodule

//-------------------------------------------Transmitter module
module uart_tx (
    input wire clk,
    input wire reset,
    input wire tx_start,
    input wire [7:0] tx_data,
    input wire baud_tick,
    output reg tx,
    output reg tx_done
);
    // State definitions
    parameter IDLE = 0, START = 1, DATA = 2, STOP = 3;
    reg [1:0] state = IDLE;
    reg [2:0] bit_index;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
            tx_done <= 0;
            tx <= 1;  // Idle state of UART line is high
            bit_index <= 0;
        end else if (baud_tick) begin
            case (state)
                IDLE: begin
                    if (tx_start) begin
                        state <= START;
                        tx_done <= 0;
                        bit_index <= 0;
                    end
                end
                START: begin
                    tx <= 0;  // Start bit
                    state <= DATA;
                end
                DATA: begin
                    tx <= tx_data[bit_index];
                    bit_index <= bit_index + 1;
                    if (bit_index == 7) state <= STOP;
                end
                STOP: begin
                    tx <= 1;  // Stop bit
                    state <= IDLE;
                    tx_done <= 1;
                end
            endcase
        end
    end
endmodule
//-----------------------------------------Receiver module
module uart_rx (
    input wire clk,
    input wire reset,
    input wire rx,
    input wire baud_tick,
    output reg [7:0] rx_data,
    output reg rx_done
);
    // State definitions
    parameter IDLE = 0, START = 1, DATA = 2, STOP = 3;
    reg [1:0] state = IDLE;
    reg [2:0] bit_index;
    reg [7:0] data;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
            rx_done <= 0;
            bit_index <= 0;
            data <= 0;
        end else if (baud_tick) begin
            case (state)
                IDLE: begin
                    if (~rx) begin  // Detect start bit
                        state <= DATA;
                        bit_index<=0;
                    end
                end
                START: begin
                    state <= DATA;
                    bit_index <= 0;
                end
                DATA: begin
                    data[bit_index] <= rx;
                    bit_index <= bit_index + 1;
                    if (bit_index == 7) state <= STOP;
                end
                STOP: begin
                    rx_data <= data;
                    rx_done <= 1;
                    state <= IDLE;
                end
            endcase
        end
    end 
endmodule
//------------------------------------------Testbench
module tb;
reg clk,reset;
reg tx_start;
reg [7:0]tx_data;
wire [7:0]rx_data;
wire tx_done;
wire rx_done;
uart_top uut(.clk(clk),.reset(reset),.tx_start(tx_start),.tx_data(tx_data),.rx_data(rx_data),.tx_done(tx_done),.rx_done(rx_done));
initial begin 
clk = 0;
end
always #10 clk<=~clk;
initial begin
tx_data= 8'b11110000;
reset =1;
#100 reset=0;
#10 tx_start=1;
#2000000 $stop;
end
initial 
begin
$monitor("time =%t ,reset=%d, tx_data =%b,tx=%b,tx_done=%b,rx_data=%b,rx_done=%b",$time,reset,tx_data,uut.tx,tx_done,tx_data,rx_done);
end

endmodule